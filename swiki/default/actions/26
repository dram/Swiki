| test name bookStorage pageStorage newBook |"Test to make sure that the submitted values make sense"test _ true.name _ request fieldsKey: 'name' ifAbsent: [	test _ false.	request settingsAt: 'error' put: 'The parameter <b>name</b> was not transmitted.'.	nil].name ifNotNil: [((name encodeForHTTP = name) and: [(name includes: $.) not]) ifFalse: [	test _ false.	request settingsAt: 'error' put: 'That name is not allowed (the name must contain only letters, numbers, and/or { ~ - _ }.']].test ifTrue: [(shelf storage dir directoryExists: name) ifTrue: [	test _ false.	request settingsAt: 'error' put: 'That name is already taken.']].test ifTrue: [bookStorage _ request fieldsKey: 'bookStorage' ifAbsent: [	test _ false.	request settingsAt: 'error' put: 'The parameter <b>book storage</b> was not transmitted.'.	nil]].test ifTrue: [(bookStorage _ Smalltalk classNamed: bookStorage) ifNil: [	test _ false.	request settingsAt: 'error' put: 'That book storage does not exist.']].test ifTrue: [(bookStorage handlesBookStorage) ifFalse: [	test _ false.	request settingsAt: 'error' put: 'That book storage is invalid.']].(test and: [book pages notNil]) ifTrue: [	"Page storage only applies to page carrying Swikis"	pageStorage _ request fieldsKey: 'pageStorage' ifAbsent: [		test _ false.		request settingsAt: 'error' put: 'The parameter <b>page storage</b> was not transmitted.'.		nil].	test ifTrue: [(pageStorage _ Smalltalk classNamed: pageStorage) ifNil: [		test _ false.		request settingsAt: 'error' put: 'That page storage does not exist.']].	test ifTrue: [(pageStorage handlesPageStorage) ifFalse: [		test _ false.		request settingsAt: 'error' put: 'That page storage is invalid.']]].test ifTrue: [(book setup at: 'inheritable' ifAbsent: [false]) ifFalse: [	test _ false.	request settingsAt: 'error' put: 'This book cannot be inherited from.']].test	ifTrue: ["Create the Swiki / Forward to setup for that Swiki"				newBook _ SwikiSubBook new.		newBook			name: name;			parent: book;			setup: Dictionary new.		newBook setup			at: 'parent' put: book name;			at: 'bookStorage' put: bookStorage.		pageStorage ifNotNil: [newBook setup at: 'pageStorage' put: pageStorage].		shelf storage createBook: newBook.		newBook loadStorageFrom: shelf.		newBook storage loadBook: newBook.		"Create settings, pages, uploads"		test _ newBook formatPrivAddress: 'create' request: request response: response shelf: shelf.		test ifNil: [test _ false].		test			ifTrue: ["Successful Create"				newBook storage writeSettingsForBook: newBook.				book addChild: newBook.				shelf addBook: newBook.				newBook formatPrivAddress: 'initialize' request: request response: response shelf: shelf.				"Forward to the appropriate thing"				response					at: 'headerStatus' put: #tempMoved;					at: 'location' put: (request referenceShelf: shelf address: ('admin/setup?book=', newBook name)).				shelf formatShelfTemplate: 'location' request: request response: response]			ifFalse: ["Create failed"				request settingsAt: 'error' put: 'Create.priv failed.'.				shelf formatBookTemplate: 'createFailed' request: request response: response book: book]]	ifFalse: ["Create failed"		shelf formatBookTemplate: 'createFailed' request: request response: response book: book]