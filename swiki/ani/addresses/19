| uploads fileId file dir files fileName newUploadsSize uploadsSize okayToUpload |Processor activeProcess priority: SwikiModule searchPriority.files _ OrderedCollection new.newUploadsSize _ 0.request raw multipartFormFieldsDo: [:mChunk |	mChunk fileName isEmptyOrNil ifFalse: [		"Get file id number"		fileId _ shelf modulesAt: 'tempUploadValue'.		shelf modulesAt: 'tempUploadValue' put: (fileId + 1).		fileId _ fileId asString.		file _ (dir _ shelf modulesAt: 'tempUploadDir') fileNamed: fileId.		mChunk saveToStream: file.		newUploadsSize _ newUploadsSize + file size.		file close.		files add: (Array with: fileId with: mChunk fileName with: mChunk contentType)]]."Check to make sure upload size is okay"uploads _ book modulesAt: 'uploads'.okayToUpload _ ((uploadsSize _ book modulesAt: 'uploadsSize') = 0)	ifTrue: [true]	ifFalse: [uploadsSize > (newUploadsSize + uploads fileSize)]."Upload to site or to page"(request fieldsAsBooleanKey: 'specific') ifTrue: ["Upload to the Page"	uploads _ uploads directoryNamed: (page id asString)].okayToUpload	ifTrue: [		"Move file"		files do: [:arr |			fileName _ request fieldsKey: 'fileName' ifAbsent: [nil].			"Add appropriate extension"			fileName ifNotNil: [fileName _ (arr at: 3) caseOf: {				['image/gif']->[fileName, '.gif'].				['image/jpeg']->[fileName, '.jpg'].				['image/png']->[fileName, '.png']}				otherwise: [fileName, '.', ((arr at: 2) copyAfterLast: $.) asLowercase]].			"Move file"			fileName				ifNil: [dir deleteFileNamed: (arr at: 1)]				ifNotNil: [uploads moveFileNamed: (dir fullNameFor: (arr at: 1)) toFileName: fileName]].		"Upload Succeeded"		response at: 'headerStatus' put: #tempMoved.		response at: 'location' put: (request referenceShelf: shelf book: book page: page address: 'looks').		book formatPageTemplate: 'attachSuccess' request: request response: response shelf: shelf page: page]	ifFalse: [		"Delete Files"		files do: [:arr | dir deleteFileNamed: (arr at: 1)].		book formatPageTemplate: 'attachFailedSize' request: request response: response shelf: shelf page: page]