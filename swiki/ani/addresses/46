| uploads fileName fileId file dir fileDict insertText alt uploadsSize |Processor activeProcess priority: SwikiModule searchPriority.fileDict _ Dictionary new.uploads _ book modulesAt: 'uploads'.uploadsSize _ book modulesAt: 'uploadsSize' ifAbsent: [0].uploadsSize _ (uploadsSize = 0)	ifTrue: ["Allow all uploads up to 1Gb"		1000000000]	ifFalse: [uploadsSize - uploads fileSize].request raw multipartFormFieldsDo: [:mChunk |	mChunk fileName isEmptyOrNil ifFalse: [		"Get file name"		fileName _ SwikiEntry validFileNameFromFileLocation: mChunk fileName.		"Get file id number"		fileId _ shelf modulesAt: 'tempUploadValue'.		shelf modulesAt: 'tempUploadValue' put: (fileId + 1).		fileId _ fileId asString.		dir _ shelf modulesAt: 'tempUploadDir'.		file _ dir fileNamed: fileId.		mChunk saveToStream: file.		uploadsSize _ uploadsSize - file size.		file close.		fileDict at: (mChunk fieldName) put: (Array with: fileName with: fileId)]].(uploadsSize >= 0)	ifTrue: ["Upload to the page"		uploads _ uploads directoryNamed: (page id asString).		insertText _ String streamContents: [:stream | 1 to: 10 do: [:i |			(fileDict includesKey: ('file', i asString)) ifTrue: [				fileName _ fileDict at: ('file', i asString).				fileId _ fileName at: 2.				fileName _ fileName at: 1.				uploads moveFileNamed: (dir fullNameFor: fileId) toFileName: fileName.				stream					nextPutAll: '<?image src="';					nextPutAll: fileName;					nextPut: $".				#('width' 'height' 'space' 'border') do: [:key |					(request fieldsHasKey: key) ifTrue: [stream						nextPut: $ ;						nextPutAll: key;						nextPut: $=;						nextPutAll: (request fieldsKey: key)]].				alt _ request fieldsKey: ('alt', i asString) ifAbsent: [''].				(alt = '') ifFalse: [stream					nextPutAll: ' alt="';					nextPutAll: (TextFormatter encodeToStrictXmlCr: (request fieldsKey: ('alt', i asString)));					nextPut: $"].				stream					nextPutAll: '?>']]].		"insert insertText into the text"		page			forbidWriting;			time: (Time now);			date: (Date today);			user: 'unknown';			insert: insertText atGallery: (request fieldsAsNumberKey: 'id' ifAbsent: [0]).		"Update user id"		request security			ifNil: [page settingsRemove: 'userId']			ifNotNil: [page settingsAt: 'userId' put: (request security id)].		[page			user: (shelf formatPrivAddress: 'getIPName' request: request response: response);			backup;			write;			permitWriting;			sendAniAlerts: request response: response shelf: shelf book: book] fork.		"Upload Succeeded"		response at: 'headerStatus' put: #tempMoved.		response at: 'location' put: (request referenceShelf: shelf book: book page: page).		book formatPageTemplate: 'attachSuccess' request: request response: response shelf: shelf page: page]	ifFalse: ["Not Allowed to Attach"		fileDict keysDo: [:id | dir deleteFileNamed: id].		book formatPageTemplate: 'attachFailed' request: request response: response shelf: shelf page: page]