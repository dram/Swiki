| uploads uploadsSize fileName fileId file dir fileDict files newText |Processor activeProcess priority: SwikiModule searchPriority.fileDict _ Dictionary new.uploads _ book modulesAt: 'uploads'.uploadsSize _ book modulesAt: 'uploadsSize' ifAbsent: [0].uploadsSize _ (uploadsSize = 0)	ifTrue: ["Allow all uploads up to 1Gb"		1000000000]	ifFalse: [uploadsSize - uploads fileSize].request raw multipartFormFieldsDo: [:mChunk |	mChunk fileName isEmptyOrNil ifFalse: [		"Get file name"		fileName _ SwikiEntry validFileNameFromFileLocation: mChunk fileName.		"Get file id number"		fileId _ shelf modulesAt: 'tempUploadValue'.		shelf modulesAt: 'tempUploadValue' put: (fileId + 1).		fileId _ fileId asString.		file _ (dir _ shelf modulesAt: 'tempUploadDir') fileNamed: fileId.		mChunk saveToStream: file.		uploadsSize _ uploadsSize - file size.		file close.		fileDict at: fileId put: fileName]]."Upload to site or to page"(request fieldsAsBooleanKey: 'specific') ifTrue: ["Upload to the Page"	uploads _ uploads directoryNamed: (page id asString)]."Okay to upload if file size is wrong"(uploadsSize >= 0)	ifTrue: ["Move file(s) to appropriate directory"		files _ OrderedCollection new.		fileDict keysAndValuesDo: [:id :name |			files add: (uploads moveFileNamed: (dir fullNameFor: id) toFileName: name)].		"Reference in Page"		(request fieldsAsBooleanKey: 'reference') ifTrue: ["Reference in page"			page				forbidWriting;				time: (Time now);				date: (Date today);				user: 'unknown'.			newText _ page text.			page isAForm				ifTrue: [files do: [:entry | 					newText at: '1' put: ((newText at: '1'), String cr, entry pluginReference)]]				ifFalse: [files do: [:entry |					newText _ newText, String cr, entry pluginReference]].			"Update user id"			request security				ifNil: [page settingsRemove: 'userId']				ifNotNil: [page settingsAt: 'userId' put: (request security id)].			page				text: newText;				user: (shelf formatPrivAddress: 'getIPName' request: request response: response);				backup;				write;				permitWriting].		page sendAniAlerts: request response: response shelf: shelf book: book.		"Upload Succeeded"		response at: 'headerStatus' put: #tempMoved.		response at: 'location' put: (request referenceShelf: shelf book: book page: page address: 'upload').		book formatPageTemplate: 'attachSuccess' request: request response: response shelf: shelf page: page]	ifFalse: ["Not Allowed to Attach"		fileDict keysDo: [:id | dir deleteFileNamed: id].		book formatPageTemplate: 'attachFailed' request: request response: response shelf: shelf page: page]