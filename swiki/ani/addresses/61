| users dir newUsers oldToNew oldId importedUser versions |dir _ book storage dir.(dir directoryExists: 'users') ifTrue: [	dir _ dir directoryNamed: 'users'.	"Import new users into the system"	users _ shelf modulesAt: 'users'.	newUsers _ SwikiUsersModule onDir: dir.	oldToNew _ Dictionary new.	newUsers users do: [:userToBeImported |		oldId _ userToBeImported id.		importedUser _ users importUser: userToBeImported.		oldToNew at: oldId put: importedUser id].	"Update pages to reflect new id mapping"	book pages do: [:page |		"Update page"		(page settingsIncludes: 'userId') ifTrue: [			page settingsAt: 'userId' put: (oldToNew at: (page settingsAt: 'userId'))].		page settingsRemove: 'alerts'.		page write.		"Update the versions too"		(versions _ page versions) do: [:version |			(version settingsIncludes: 'userId') ifTrue: [				version settingsAt: 'userId' put: (oldToNew at: (version settingsAt: 'userId'))].			version settingsRemove: 'alerts'].		page storage writeVersions: versions].	"Remove the files"	PageFormatter deleteTreeForDir: dir.	dir containingDirectory deleteDirectory: 'users'].true