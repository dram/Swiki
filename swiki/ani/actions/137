| children options days max min testDate item test |children _ page childrenInBook: book."Establish days, max, and min from options"options _ request settingsAt: 'options'.days _ (options includesKey: 'days')	ifTrue: [(options at: 'days') isAllDigits ifTrue: [(options at: 'days') asNumber] ifFalse: [14]]	ifFalse: [14].max _ (options includesKey: 'max')	ifTrue: [(options at: 'max') isAllDigits ifTrue: [(options at: 'max') asNumber] ifFalse: [7]]	ifFalse: [7].min _ (options includesKey: 'min')	ifTrue: [(options at: 'min') isAllDigits ifTrue: [(options at: 'min') asNumber] ifFalse: [2]]	ifFalse: [2].(min = 0) ifTrue: [min _ 1].(max < min) ifTrue: [min _ max]."Filter"(request settingsAt: 'isOwner') ifFalse: ["Include only the linkable pages"	children _ children select: [:i | (i accessLevelForRequest: request) > 1]]."Sort by time"children _ (children asSortedCollection: [:x :y | (x date = y date) ifTrue: [x time > y time] ifFalse: [x date > y date]]) asOrderedCollection."Establish final collection"testDate _ Date today subtractDays: days.item _ 1.[(test _ children at: item ifAbsent: [nil])	ifNil: [false]	ifNotNil: [test date > testDate]] whileTrue: [item _ item + 1].item _ item - 1.children _ (item < min)	ifTrue: [(children size < min)		ifTrue: [children]		ifFalse: [children copyFrom: 1 to: min]]	ifFalse: [(item < max)		ifTrue: [children copyFrom: 1 to: item]		ifFalse: [children copyFrom: 1 to: max]]."Create results"String streamContents: [:stream |	((page accessLevelForRequest: request) > 2) ifTrue: [		"Allow people who can edit this page to create new pages"		stream nextPutAll: (book formatBookTemplate: 'blog2create' request: request response: response shelf: shelf)].	children do: [:i | stream nextPutAll:		(book formatPageTemplate: 'blog2' request: request response: response shelf: shelf page: i)]]