| testDate sortedPages item test selectedPages date |testDate _ Date today subtractDays: 8."Use only the ones that are linkable for the request"sortedPages _ request linkablePagesInBook: book.sortedPages _ (sortedPages asSortedCollection: [:x :y | (x date = y date) ifTrue: [x time > y time] ifFalse: [x date > y date]]) asOrderedCollection.item _ 1.[(test _ sortedPages at: item ifAbsent: [nil])	ifNil: [false]	ifNotNil: [test date > testDate]] whileTrue: [item _ item + 1].item _ item - 1.(item < 5)	ifTrue: [(sortedPages size < 5)		ifTrue: [selectedPages _ sortedPages]		ifFalse: [selectedPages _ sortedPages copyFrom: 1 to: 5]]	ifFalse: [(item < 30)		ifTrue: [selectedPages _ sortedPages copyFrom: 1 to: item]		ifFalse: [selectedPages _ sortedPages copyFrom: 1 to: 30]].date _ nil.String streamContents: [:stream |	selectedPages do: [:page |		(date notNil and: [page date = date]) ifFalse: [			date ifNotNil: ["End Previous"				stream					nextPutAll: '</ul>';					nextPutAll: String crlf].			date _ page date.			stream				nextPutAll: '<h3>';				nextPutAll: page printDate;				nextPutAll: '</h3>';				nextPutAll: String crlf;				nextPutAll: '<ul>';				nextPutAll: String crlf].		"Remove aliases to allow link action to work"		request			settingsRemove: 'alias';			settingsRemove: 'location'.		stream			nextPutAll: (book formatPageTemplate: 'recentListing' request: request response: response shelf: shelf page: page)].	stream		nextPutAll: '</ul>'.	"Add link to complete recent changes page if necessary"	((selectedPages size) = (sortedPages size)) ifFalse: [stream		nextPutAll: String crlf;		nextPutAll: '<h3>';		nextPutAll: (book formatBookTemplate: 'toCompleteChanges' request: request response: response shelf: shelf);		nextPutAll: '</h3>']]