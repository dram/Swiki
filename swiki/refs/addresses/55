(page settingsAt: 'isText' ifAbsent: [true])	ifTrue: [response at: 'headerStatus' put: #notFound.		book formatBookTemplate: 'addressNotFound' request: request response: response shelf: shelf]	ifFalse: [((page settingsAt: 'lock' ifAbsent: [false]) and: [(page passwordMatches: request response: response shelf: shelf book: book) not])		ifTrue: [response at: 'headerStatus' put: #notFound.			book formatBookTemplate: 'addressNotFound' request: request response: response shelf: shelf]		ifFalse: [			page				forbidWriting;				clearRefsCache;				text: (request fieldsKey: 'text' ifAbsent: ['']);				settingsRemove: 'lockPassword';				settingsAt: 'size' put: ((request fieldsAsNumberKey: 'width')@(request fieldsAsNumberKey: 'height'));				settingsAt: 'referenceCache' put: (((request fieldsKey: 'references') findTokens: '	') collect: [:i | i asNumber]);				time: (Time now);				date: (Date today);				nameUnique: (request fieldsKey: 'name') book: book;				user: 'unknown'.			(page settingsAt: 'referenceCache') isEmpty ifTrue: [page				settingsRemove: 'referenceCache'].			(request fieldsHasKey: 'lockPassword')				ifTrue: [page					settingsAt: 'lockPassword' put: (request fieldsKey: 'lockPassword');					settingsAt: 'lock' put: true]				ifFalse: [page					settingsRemove: 'lock'].			[page				user: (shelf formatPrivAddress: 'getIPName' request: request response: response);				backup;				write;				permitWriting] fork.			response at: 'contentType' put: (MIMEDocument contentTypePlainText).			'success']]