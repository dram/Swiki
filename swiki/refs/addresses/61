| filter scheme textForms projectForms newModule |(filter _ book formatPrivAddress: 'filterAdmin' request: request response: response shelf: shelf)	ifNil: [(request fieldsHasKey: 'scheme')		ifTrue: [			scheme _ Array new: 4.			scheme				at: 1 put: (request fieldsKey: 'scheme');				at: 2 put: (textForms _ OrderedCollection new);				at: 3 put: (projectForms _ OrderedCollection new);				at: 4 put: (request fieldsKey: 'next' ifAbsent: ['default']).			(book formatPrivAddress: 'allTextForms' request: request response: response shelf: shelf) do: [:i |				(request fieldsAsBooleanKey: ('text-', i)) ifTrue: [					textForms add: i]].			(request fieldsAsBooleanKey: 'text-default') ifTrue: [				textForms add: 'default'].			(book formatPrivAddress: 'allProjectForms' request: request response: response shelf: shelf) do: [:i |				(request fieldsAsBooleanKey: ('project-', i)) ifTrue: [					projectForms add: i]].			(request fieldsAsBooleanKey: 'project-default') ifTrue: [				projectForms add: 'default'].			((projectForms size + textForms size) = 0)				ifTrue: ["Error: at least one form must be selected"					book formatPageTemplate: 'saveSchemeFailed' request: request response: response shelf: shelf page: page]				ifFalse: ["Save form and forward to forms"					newModule _ (book modulesAt: 'schemes') select: [:i | (i at: 1) ~= (scheme at: 1)].					newModule add:  scheme.					book modulesAt: 'schemes' put: newModule.					(book storage dir fileExists: 'schemes.xml') ifTrue: [						book storage dir deleteFileNamed: 'schemes.xml'].					(book storage dir newFileNamed: 'schemes.xml')						nextPutAll: (SwikiSchemeReadWriter schemesToXml: newModule);						close.					response at: 'headerStatus' put: #tempMoved.					response at: 'location' put: (request referenceShelf: shelf book: book page: page address: 'forms').					book formatPageTemplate: 'saveSchemeSuccess' request: request response: response shelf: shelf page: page]]		ifFalse: [response at: 'headerStatus' put: #notFound.			book formatBookTemplate: 'addressNotFound' request: request response: response shelf: shelf]]	ifNotNil: [filter]