"Used by the upload page to attach a new project and thumbnail,soas to upload an external project"| uploads fileName fileId file dir fileDict okayToUpload hasProject hasThumbnail |Processor activeProcess priority: SwikiModule searchPriority.fileDict _ Dictionary new.hasProject _ false.hasThumbnail _ false.request raw multipartFormFieldsDo: [:mChunk |	mChunk fileName isEmptyOrNil ifFalse: [		"Get file name"		fileName _ (mChunk fieldName = 'project')			ifTrue: [hasProject _ true.				'project.pr']			ifFalse: [(mChunk fieldName = 'thumbnail')				ifTrue: [hasThumbnail _ true.					'thumbnail.gif']				ifFalse: [(mChunk fileName findTokens: ':/\') last]].		"Get file id number"		fileId _ shelf modulesAt: 'tempUploadValue'.		shelf modulesAt: 'tempUploadValue' put: (fileId + 1).		fileId _ fileId asString.		file _ (dir _ shelf modulesAt: 'tempUploadDir') fileNamed: fileId.		mChunk saveToStream: file.		file close.		fileDict at: fileId put: fileName]]."Upload to page"uploads _ (book modulesAt: 'uploads') directoryNamed: (page id asString)."Okay to upload if locked"okayToUpload _ (page settingsAt: 'lock' ifAbsent: [false])	ifTrue: [page passwordMatches: request response: response shelf: shelf book: book]	ifFalse: [true]."Must have both project and thumbnail"okayToUpload ifTrue: [	okayToUpload _ hasProject and: [hasThumbnail]].okayToUpload	ifTrue: ["Move file(s) to appropriate directory"		fileDict keysAndValuesDo: [:id :name |			uploads moveFileNamed: (dir fullNameFor: id) toFileName: name].		"Update page"		page			forbidWriting;			clearRefsCache;			text: '';			time: (Time now);			date: (Date today);			user: 'unknown'.		[page			user: (shelf formatPrivAddress: 'getIPName' request: request response: response);			backup;			write;			permitWriting] fork. 				"Upload Succeeded"		response at: 'headerStatus' put: #tempMoved.		response at: 'location' put: (request referenceShelf: shelf book: book page: page).		book formatPageTemplate: 'attachSuccess' request: request response: response shelf: shelf page: page]	ifFalse: ["Password did not match"		fileDict keysDo: [:id | dir deleteFileNamed: id].		book formatPageTemplate: 'attachFailed' request: request response: response shelf: shelf page: page]