"Initialize Pluggable Upload Server"| uploadServerPath uploadServer uploadHistoryServer |(book rawSettingsIncludes: 'uploadServerPath')	ifTrue: ["Create Upload Servers"		uploadServerPath _ book settingsAt: 'uploadServerPath'.		uploadServer _ SwikiFileServer new.		uploadServer refFileBlock: [:file :dir :options | String streamContents: [:stream | stream			nextPutAll: '<a href="';			nextPutAll: uploadServerPath;			nextPutAll: dir httpPath;			nextPutAll: file last httpName;			nextPutAll: '" title="';			nextPutAll: file strictXmlName;			nextPutAll: ': uploaded ';			nextPutAll: (file last modificationDateString);			nextPutAll: ' at ';			nextPutAll: (file last modificationTimeString);			nextPutAll: '">';			nextPutAll: (options at: 'alt' ifAbsent: [file xmlName]);			nextPutAll: '</a>']].		uploadServer refImageBlock: [:file :dir :options | String streamContents: [:stream | stream			nextPutAll: '<img src="';			nextPutAll: uploadServerPath;			nextPutAll: dir httpPath;			nextPutAll: file last httpName;			nextPutAll: '" width=';			nextPutAll: file last width asString;			nextPutAll: ' height=';			nextPutAll: file last height asString;			nextPutAll: ' alt="';			nextPutAll: ((options includesKey: 'alt')				ifTrue: [options at: 'alt']				ifFalse: ['Uploaded Image: ', file strictXmlName]);			nextPutAll: '">']].		uploadServer refDirectoryBlock: [:dir :options | '<a href="', uploadServerPath, dir httpPath, '">', (options at: 'alias' ifAbsent: [uploadServerPath, dir httpPath]), '</a>'].		uploadServer refMissingFileBlock: [:fileName :dir :options | 'Missing File (', uploadServerPath, dir httpPath, fileName encodeForHTTP, ')'].		uploadServer serveFileBlock: [:file :dir :options |			(options at: 'response')				at: 'cacheing' put: true;				at: 'contentType' put: file mimeType.			dir readOnlyFile: file].		uploadServer serveDirectoryBlock: [:dir :options | | file | 			(file _ dir fileRefsCacheAt: 'index.html' ifAbsent: [nil])				ifNil: [					(options at: 'request')						settingsAt: 'dir' put: dir.					book formatBookTemplate: 'fileList' request: (options at: 'request') response: (options at: 'response') shelf: shelf]				ifNotNil: [					file _ file last.					(options at: 'response')						at: 'cacheing' put: true;						at: 'contentType' put: file mimeType.					dir readOnlyFile: file]].		uploadServer serveMissingFileBlock: [:path :dir :options | | subDir |			"Check if it is a directory"			(subDir _ dir directoryNamed: path ifAbsent: [nil])				ifNil: ["Not Found"					(options at: 'response') at: 'headerStatus' put: #notFound.					shelf formatShelfTemplate: 'notFound' request: (options at: 'request') response: (options at: 'response')]				ifNotNil: ["Redirect to directory"					(options at: 'response')						at: 'headerStatus' put: #tempMoved;						at: 'location' put: ('/uploads/', subDir httpPath).					shelf formatShelfTemplate: 'toDir' request: (options at: 'request') response: (options at: 'response')]].		book modulesAt: 'uploadServer' put: uploadServer.		"Upload History Server"		uploadHistoryServer _ SwikiFileServer new.		uploadHistoryServer refFileBlock: [:file :dir :options | "TODO"].		uploadHistoryServer serveFileBlock: [:file :dir :options |			| page fileRequest fileResponse template |			page _ (dir name isAllDigits)				ifTrue: [book pages at: (dir name asNumber) ifAbsent: [nil]]				ifFalse: [nil].			fileResponse _ options at: 'response'.			(fileRequest _ options at: 'request')				settingsAt: 'dir' put: dir;				settingsAt: 'file' put: file.			(file isAnImage and: [fileRequest fieldsAsBooleanKey: 'show' ifAbsent: [false]])				ifTrue: [template _ 'fileHistoryShow']				ifFalse: [template _ 'fileHistory'].			page				ifNil: [book formatBookTemplate: template request: fileRequest response: fileResponse shelf: shelf]				ifNotNil: [book formatPageTemplate: template request: fileRequest response: fileResponse shelf: shelf page: page]].		uploadHistoryServer serveDirectoryBlock: [:dir :options |			(options at: 'response') at: 'headerStatus' put: #notFound.			shelf formatShelfTemplate: 'notFound' request: (options at: 'request') response: (options at: 'response')].		uploadHistoryServer serveMissingFileBlock: [:path :dir :options | | subDir |			(options at: 'response') at: 'headerStatus' put: #notFound.			shelf formatShelfTemplate: 'notFound' request: (options at: 'request') response: (options at: 'response')].		book modulesAt: 'uploadHistoryServer' put: uploadHistoryServer]	ifFalse: ["Delete Upload Servers"		book rawModulesRemove: 'uploadServer'.		book rawModulesRemove: 'uploadHistoryServer']