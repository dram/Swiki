| uploads uploadsSize fileName fileId file dir fileDict files newText okayToUpload limit |Processor activeProcess priority: SwikiModule searchPriority.limit _ 5.fileDict _ Dictionary new.uploads _ book modulesAt: 'uploads'.uploadsSize _ book modulesAt: 'uploadsSize' ifAbsent: [0].uploadsSize _ (uploadsSize = 0)	ifTrue: ["Allow all uploads up to 1Gb"		1000000000]	ifFalse: [uploadsSize - uploads fileSize].request raw multipartFormFieldsDo: [:mChunk |	mChunk fileName isEmptyOrNil ifFalse: [		"Get file name"		fileName _ SwikiEntry validFileNameFromFileLocation: mChunk fileName.		"Get file id number"		fileId _ shelf modulesAt: 'tempUploadValue'.		shelf modulesAt: 'tempUploadValue' put: (fileId + 1).		fileId _ fileId asString.		(limit = 0)			ifTrue: ["Exceeded number of uploads allowed"				mChunk saveToStream: (DummyStream on: nil)]			ifFalse: ["Save to temp directory"				file _ (dir _ shelf modulesAt: 'tempUploadDir') fileNamed: fileId.				mChunk saveToStream: file.				uploadsSize _ uploadsSize - file size.				file close.				fileDict at: fileId put: fileName.				limit _ limit - 1]]]."Upload to site or to page"(request fieldsAsBooleanKey: 'specific') ifTrue: ["Upload to the Page"	uploads _ uploads directoryNamed: (page id asString)]."Okay to upload if locked"okayToUpload _ (page settingsAt: 'lock' ifAbsent: [false])	ifTrue: [page passwordMatches: request response: response shelf: shelf book: book]	ifFalse: [true].okayToUpload	ifTrue: [(uploadsSize < 0)		ifTrue: ["Failed because of upload limit"			fileDict keysDo: [:id | dir deleteFileNamed: id].			book formatPageTemplate: 'attachFailedSize' request: request response: response shelf: shelf page: page]		ifFalse: ["Move file(s) to appropriate directory"			files _ OrderedCollection new.			fileDict keysAndValuesDo: [:id :name |				files add: (uploads moveFileNamed: (dir fullNameFor: id) toFileName: name)].			"Reference in Page"			(request fieldsAsBooleanKey: 'reference') ifTrue: ["Reference in page"				page					forbidWriting;					time: (Time now);					date: (Date today);					user: 'unknown'.				newText _ page text.				page isAForm					ifTrue: [files do: [:entry | 						newText at: '1' put: ((newText at: '1'), String cr, entry pluginReference)]]					ifFalse: [files do: [:entry |						newText _ newText, String cr, entry pluginReference]].				page text: newText.				[page					user: (shelf formatPrivAddress: 'getIPName' request: request response: response);					backup;					write;					permitWriting;					sendAlerts: request response: response shelf: shelf book: book] fork].			"Upload Succeeded"			response at: 'headerStatus' put: #tempMoved.			response at: 'location' put: (request referenceShelf: shelf book: book page: page address: 'upload').			book formatPageTemplate: 'attachSuccess' request: request response: response shelf: shelf page: page]]	ifFalse: ["Password did not match"		fileDict keysDo: [:id | dir deleteFileNamed: id].		book formatPageTemplate: 'attachFailedPassword' request: request response: response shelf: shelf page: page]