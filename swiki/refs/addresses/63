| filter form fileDict fileName fileId file hasProject hasThumbnail dir uploads |(filter _ book formatPrivAddress: 'filterAdmin' request: request response: response shelf: shelf)	ifNil: [		form _ request fieldsKey: 'form'.		fileDict _ Dictionary new.		hasProject _ false.		hasThumbnail _ false.		request raw multipartFormFieldsDo: [:mChunk |			mChunk fileName isEmptyOrNil ifFalse: [				"Get file name"				fileName _ (mChunk fieldName = 'project')					ifTrue: [hasProject _ true.						'.pr']					ifFalse: [(mChunk fieldName = 'thumbnail')						ifTrue: [hasThumbnail _ true.							'.gif']						ifFalse: [(mChunk fileName findTokens: ':/\') last]].				"Get file id number"				fileId _ shelf modulesAt: 'tempUploadValue'.				shelf modulesAt: 'tempUploadValue' put: (fileId + 1).				fileId _ fileId asString.				file _ (dir _ shelf modulesAt: 'tempUploadDir') fileNamed: fileId.				mChunk saveToStream: file.				file close.				fileDict at: fileId put: fileName]].		uploads _ (book modulesAt: 'uploads') directoryNamed: 'forms'.		"Must have both project and thumbnail"		(hasProject and: [hasThumbnail])			ifTrue: ["Move file(s) to appropriate directory"				form _ request fieldsKey: 'form'.				fileDict keysAndValuesDo: [:id :name |					uploads moveFileNamed: (dir fullNameFor: id) toFileName: (form, name)].				"Succeess"				response at: 'headerStatus' put: #tempMoved.				response at: 'location' put: (request referenceShelf: shelf book: book page: page address: 'forms').				book formatPageTemplate: 'saveProjectFormSuccess' request: request response: response shelf: shelf page: page]			ifFalse: [book formatPageTemplate: 'saveProjectFormFailed' request: request response: response shelf: shelf page: page]]	ifNotNil: [filter]