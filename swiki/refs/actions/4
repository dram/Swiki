| testDate sortedPages item test selectedPages date return |testDate _ Date today subtractDays: 8.sortedPages _ (book pages asSortedCollection: [:x :y | (x date = y date) ifTrue: [x time > y time] ifFalse: [x date > y date]]) asOrderedCollection.item _ 1.[(test _ sortedPages at: item ifAbsent: [nil])	ifNil: [false]	ifNotNil: [test date > testDate]] whileTrue: [item _ item + 1].item _ item - 1.(item < 5)	ifTrue: [(sortedPages size < 5)		ifTrue: [selectedPages _ sortedPages]		ifFalse: [selectedPages _ sortedPages copyFrom: 1 to: 5]]	ifFalse: [(item < 30)		ifTrue: [selectedPages _ sortedPages copyFrom: 1 to: item]		ifFalse: [selectedPages _ sortedPages copyFrom: 1 to: 30]].date _ nil.return _ WriteStream on: String new.selectedPages do: [:page |	(date notNil and: [page date = date]) ifFalse: [		date ifNotNil: ["End Previous"			return nextPutAll: '</ul>', String crlf].		date _ page date.		return nextPutAll: '<h3>', page printDate, '</h3>', String crlf, '<ul>', String crlf].	return nextPutAll: (book formatPageTemplate: 'recentListing' request: request response: response shelf: shelf page: page)].return nextPutAll: '</ul>'."Add link to complete recent changes page if necessary"((selectedPages size) = (sortedPages size)) ifFalse: [return nextPutAll: String crlf, '<h3>', (book formatBookTemplate: 'toCompleteChanges' request: request response: response shelf: shelf), '</h3>'].return contents