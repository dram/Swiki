"The vote plug-in must have graph option.It must have either a value option or both to and from options.It may have a label and page option"| nextPage graph value options label from to |options _ request settingsAt: 'options'.(graph _ options at: 'graph' ifAbsent: [nil])	ifNil: ['<b>Vote function must have a <em>graph</em> field.</b>']	ifNotNil: [(value _ options at: 'value' ifAbsent: [nil])		ifNil: [			to _ LineFormatter numberOrNilFromString: (options at: 'to' ifAbsent: [nil]).			from _ LineFormatter numberOrNilFromString: (options at: 'from' ifAbsent: [nil]).			(to isNil or: [from isNil])				ifTrue: ['<b>Vote function must have either a <em>value</em> field or both <em>from</em> and <em>to</em> fields.</b>']				ifFalse: ["To and From fields"					"Determine the page"					nextPage _ (nextPage _ LineFormatter numberOrNilFromString: (options at: 'page' ifAbsent: [nil])) ifNil: [page] ifNotNil: [(book hasPageId: nextPage) ifTrue: [book pages at: nextPage] ifFalse: [page]].					"Determine the label"					label _ options at: 'label' ifAbsent: ['submit'].					"Return form"					String streamContents: [:stream |						stream							nextPutAll: '<form action="';							nextPutAll: (request referenceShelf: shelf book: book page: nextPage address: 'vote');							nextPutAll: '"><input type="hidden" name="graph" value="';							nextPutAll: (TextFormatter encodeToStrictXmlCrlf: graph);							nextPutAll: '"><select name="value">'.						(from > to)							ifTrue: [from to: to by: -1 do: [:i | stream								nextPutAll: '<option value="';								nextPutAll: i asString;								nextPutAll: '">';								nextPutAll: i asString;								nextPutAll: String crlf]]							ifFalse: [from to: to do: [:i | stream								nextPutAll: '<option value="';								nextPutAll: i asString;								nextPutAll: '">';								nextPutAll: i asString;								nextPutAll: String crlf]].						stream							nextPutAll: '</select>&nbsp;<input type="submit" value="';							nextPutAll: (TextFormatter encodeToStrictXmlCrlf: label);							nextPutAll: '"></form>']]]		ifNotNil: [			"Determine the page"			nextPage _ (nextPage _ LineFormatter numberOrNilFromString: (options at: 'page' ifAbsent: [nil])) ifNil: [page] ifNotNil: [(book hasPageId: nextPage) ifTrue: [book pages at: nextPage] ifFalse: [page]].			"Determine the label"			label _ options at: 'label' ifAbsent: [value].			"Return form with button"			String streamContents: [:stream | stream				nextPutAll: '<form action="';				nextPutAll: (request referenceShelf: shelf book: book page: nextPage address: 'vote');				nextPutAll: '"><input type="hidden" name="graph" value="';				nextPutAll: (TextFormatter encodeToStrictXmlCrlf: graph);				nextPutAll: '"><input type="hidden" name="value" value="';				nextPutAll: (TextFormatter encodeToStrictXmlCrlf: value);				nextPutAll: '"><input type="submit" value="';				nextPutAll: (TextFormatter encodeToStrictXmlCrlf: label);				nextPutAll: '"></form>']]]