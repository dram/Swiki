| mySchemeName myScheme return |mySchemeName _ page settingsAt: 'scheme' ifAbsent: ['default'].(book formatPrivAddress: 'allSchemes' request: request response: response shelf: shelf) do: [:scheme |	((scheme at: 1) = mySchemeName) ifTrue: [		myScheme _ scheme]].return _ WriteStream on: String new.(((myScheme at: 2) size + (myScheme at: 3) size) < 2)	ifTrue: [		(myScheme at: 2) do: [:str | return			nextPutAll: '<input type="hidden" name="type" value="text-';			nextPutAll: (TextFormatter encodeToStrictXmlCrlf: str);			nextPutAll: '">'].		(myScheme at: 3) do: [:str | return			nextPutAll: '<input type="hidden" name="type" value="project-';			nextPutAll: (TextFormatter encodeToStrictXmlCrlf: str);			nextPutAll: '">']]	ifFalse: [		return			nextPutAll: '&nbsp;<b>as</b>&nbsp;<select name="type">'.		(myScheme at: 2) do: [:str | return			nextPutAll: '<option value="text-';			nextPutAll: (TextFormatter encodeToStrictXmlCrlf: str);			nextPutAll: '">';			nextPutAll: ((str = 'default')				ifTrue: ['blank TEXT']				ifFalse: [TextFormatter encodeToXmlCrlf: str]);			nextPutAll: String crlf].		(myScheme at: 3) do: [:str | return			nextPutAll: '<option value="project-';			nextPutAll: (TextFormatter encodeToStrictXmlCrlf: str);			nextPutAll: '">';			nextPutAll: ((str = 'default')				ifTrue: ['blank PROJECT']				ifFalse: [TextFormatter encodeToXmlCrlf: str]);			nextPutAll: String crlf].		return			nextPutAll: '</select>'].return contents