"until Plug-in returns the years and days until the datedate is necessary, format is optional"| options error date today year day |options _ request settingsAt: 'options'.error _ nil.date _ options at: 'date' ifAbsent: [	error _ '<b>Until function must have a <em>date</em> field.</b>'].error ifNil: [	[date _ Date fromString: date] ifError: [:a :b |		error _ '<b>Until function is unable to parse <em>date</em> field entry.</b>']].error	ifNil: [		today _ Date today.		(options at: 'format' ifAbsent: ['yd']) caseOf: {			['yd']->["5 years and 4 days"				year _ (date year) - (today year).				day _ (date day) - (today day).				(day < 0) ifTrue: [					year _ year - 1.					day _ day + 365].				String streamContents: [:stream | stream					nextPutAll: year asStringWithCommas;					nextPutAll: ((year = 1) ifTrue: ['&nbsp;year'] ifFalse: ['&nbsp;years']);					nextPutAll: ' and ';					nextPutAll: day asStringWithCommas;					nextPutAll: ((day = 1) ifTrue: ['&nbsp;day'] ifFalse: ['&nbsp;days'])]].			['dy']->["4 days and 5 years"				year _ (date year) - (today year).				day _ (date day) - (today day).				(day < 0) ifTrue: [					year _ year - 1.					day _ day + 365].				String streamContents: [:stream | stream					nextPutAll: day asStringWithCommas;					nextPutAll: ((day = 1) ifTrue: ['&nbsp;day'] ifFalse: ['&nbsp;days']);					nextPutAll: ' and ';					nextPutAll: year asStringWithCommas;					nextPutAll: ((year = 1) ifTrue: ['&nbsp;year'] ifFalse: ['&nbsp;years'])]].			['d']->["17 days"				day _ (date day) - (today day).				(day < 0) ifTrue: [day _ day + 365].				String streamContents: [:stream | stream					nextPutAll: day asStringWithCommas;					nextPutAll: ((day = 1) ifTrue: ['&nbsp;day'] ifFalse: ['&nbsp;days'])]].			['y']->["5 years"				year _ (date year) - (today year).				day _ (date day) - (today day).				(day < 0) ifTrue: [year _ year - 1].				String streamContents: [:stream | stream					nextPutAll: year asStringWithCommas;					nextPutAll: ((year = 1) ifTrue: ['&nbsp;year'] ifFalse: ['&nbsp;years'])]]}			otherwise: ['<b>Until function only accepts these formats: yd, dy, d, and y.']]	ifNotNil: ["Error"		error]