"	REQUIRED	src = the name of the image	OPTIONAL	width = the maximum width of the inlined image	height = the maximum height of the inlined image	align = the alignment	alt = the ALT tag	page = the page where the image is found	linkToPage = link to a page	space = space around it	border = border size"| options return src image thumb imgPage uploads pageUploads width height versions linkToPage size link alt title |options _ request settingsAt: 'options'.return _ nil."Get src field and page field"(src _ options at: 'src' ifAbsent: [nil]) ifNil: [	return _ '<b>IMAGE function must have a <em>src</em> field.</b>'].imgPage _ (imgPage _ options at: 'page' ifAbsent: [nil])	ifNil: [page]	ifNotNil: [imgPage isAllDigits		ifTrue: [book pages at: (imgPage asInteger)			ifAbsent: [return _ '<b>IMAGE function <em>page</em> must be a valid page number.</b>']]		ifFalse: [return _ '<b>IMAGE function <em>page</em> field must be an integer.</b>']].return ifNil: [	"Find the image"	uploads _ book modulesAt: 'uploads'.	versions _ nil.	"Try to find the image in the page directory"	pageUploads _ uploads directoryNamed: imgPage id asString.	versions _ pageUploads fileRefsCacheAt: src ifAbsent: [nil].	versions		ifNil: ["Try to find the image in the book directory"			versions _ uploads fileRefsCacheAt: src ifAbsent: [				return _ '<b>IMAGE function cannot find the upload.</b>']]		ifNotNil: [uploads _ pageUploads]].return ifNil: [	"Check to make sure it is an image"	(image _ versions last) isAnImage ifFalse: [		return _ '<b>IMAGE function <em>src</em> must be an image (GIF, JPEG, PNG).</b>']].return ifNil: [	"establish the width and height"	(width _ options at: 'width' ifAbsent: [nil]) ifNotNil: [		width isAllDigits			ifTrue: [width _ width asInteger]			ifFalse: [return _ '<b>IMAGE function <em>width</em> must be an integer.</b>']].	(height _ options at: 'height' ifAbsent: [nil]) ifNotNil: [		height isAllDigits			ifTrue: [height _ height asInteger]			ifFalse: [return _ '<b>IMAGE function <em>height</em> must be an integer.</b>']]].return ifNil: [	"establish linkToPage"	(linkToPage _ options at: 'linktopage' ifAbsent: [nil]) ifNotNil: [		linkToPage isAllDigits			ifTrue: [				linkToPage _ book pages at: (linkToPage asInteger) ifAbsent: [					return _ '<b>IMAGE function <em>page</em> must be a valid page number.</b>']]			ifFalse: [return _ '<b>IMAGE function <em>linkToPage</em> must be an integer.</b>']]].return ifNil: [	"Check to see whether a thumbnail is needed."	size _ image thumbnailSizeWidth: width height: height.	(image size = size)		ifTrue: ["No need for a thumbnail"			thumb _ nil]		ifFalse: ["Try for a thumbnail"			thumb _ uploads thumbnailOf: versions size: size.			thumb ifNil: [thumb _ image]].	"Establish link, alt, and title"	linkToPage		ifNil: [thumb			ifNil: [				link _ nil.				(alt _ options at: 'alt' ifAbsent: [nil])					ifNil: ["No alternate"						alt _ versions strictXmlName.						title _ String streamContents: [:stream | stream							nextPutAll: versions strictXmlName;							nextPutAll: ': uploaded ';							nextPutAll: (image modificationDateString);							nextPutAll: ' at ';							nextPutAll: (image modificationTimeString)]]					ifNotNil: [title _ alt]]			ifNotNil: [				link _ String streamContents: [:stream | stream					nextPutAll: (book settingsAt: 'uploadServerPath');					nextPutAll: uploads httpPath;					nextPutAll: image httpName].				(alt _ options at: 'alt' ifAbsent: [nil])					ifNil: ["No alternate"						alt _ versions strictXmlName.						title _ String streamContents: [:stream | stream							nextPutAll: 'Click to enlarge: ';							nextPutAll: alt;							nextPutAll: ' (';							nextPutAll: image width asString;							nextPut: $x;							nextPutAll: image height asString;							nextPut: $)]]					ifNotNil: [title _ alt]]]		ifNotNil: [			link _ request referenceShelf: shelf book: book page: linkToPage.			title _ options at: 'alt' ifAbsent: [String streamContents: [:stream | stream				nextPutAll: linkToPage showStrictName;				nextPutAll: ': last edited ';				nextPutAll: (book formatPageAction: 'timePast' request: request response: response shelf: shelf page: linkToPage);				nextPutAll: ' ago by ';				nextPutAll: (book formatPageAction: 'user-plaintext' request: request response: response shelf: shelf page: linkToPage)]].			alt _ options at: 'alt' ifAbsent: [linkToPage showStrictName]].	"Reference the file"	return _ String streamContents: [:stream |		link ifNotNil: [stream			nextPutAll: '<a class="internal" href="';			nextPutAll: link;			nextPutAll: '">'].		stream			nextPutAll: '<img src="';			nextPutAll: (book settingsAt: 'uploadServerPath');			nextPutAll: uploads httpPath;			nextPutAll: (thumb				ifNil: [image httpName]				ifNotNil: [thumb httpName]);			nextPutAll: '" width=';			nextPutAll: size x asString;			nextPutAll: ' height=';			nextPutAll: size y asString;			nextPutAll: ' border=';			nextPutAll: (options at: 'border' ifAbsent: ['0']).		(options includesKey: 'space') ifTrue: [stream			nextPutAll: ' vspace=';			nextPutAll: (options at: 'space');			nextPutAll: ' hspace=';			nextPutAll: (options at: 'space')].		(options includesKey: 'align') ifTrue: [stream			nextPutAll: ' align=';			nextPutAll: (options at: 'align')].		stream			nextPutAll: ' title="';			nextPutAll: title;			nextPutAll: '" alt="';			nextPutAll: alt;			nextPutAll: '">'.		link ifNotNil: [stream			nextPutAll: '</a>']]].return